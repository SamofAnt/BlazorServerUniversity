@page "/StudentForm"
@using Microsoft.Build.Framework
@using System.ComponentModel.DataAnnotations;
@using System.Transactions

@using BlazorServerUniversity.Repositories

@inject UniversityContext Context;
@inject IPersonalDataRepository PersonalDataRepository;
@inject IStudentRepository StudentRepository;
@inject IToastService toastService

<div class="col-12">
    <h3>Добавление студента</h3>
    <EditForm Model="@model" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
        <DataAnnotationsValidator/>
            <div class="form-group">
                <label for="FirstName" class="font-weight-bold">Имя</label>
                <InputText style="width: 30%" Id="FirstName" placeholder="Введите имя" @bind-Value="@model.FirstName" class="form-control col-3"></InputText>
                <ValidationMessage For="@(() => model.FirstName)"/>
            </div>
            <div class="form-group">
                <label for="LastName" class="font-weight-bold">Фамилия</label>
                <InputText Id="LastName" style="width: 30%"placeholder="Введите фамилию" @bind-Value="@model.LastName" class="form-control  col-3"></InputText>
                <ValidationMessage For="@(() => model.LastName)"/>
            </div>

        <div class="form-group">
            <label for="Age" class="font-weight-bold">Возраст</label>
            <InputNumber Id="Age" style="width: 30%" placeholder="Введие возраст" @bind-Value="@model.Age" class="form-control col-3"></InputNumber>
            <ValidationMessage For="@(() => model.Age)"/>
        </div>

        <div class="form-group">
            <label for="Course" class="font-weight-bold">Курс</label>
            <InputNumber Id="Course" style="width: 30%" placeholder="Выберите курс" @bind-Value="@model.Course" class="form-control col-3"></InputNumber>
            <ValidationMessage For="@(() => model.Course)"/>
        </div>
        <div class="form-group">
            <label for="Address" class="font-weight-bold">Адрес</label>
            <InputText Id="Address" style="width: 30%" placeholder="Введите адрес" @bind-Value="@model.Address" class="form-control col-3"></InputText>
            <ValidationMessage For="@(() => model.Address)"/>
        </div>
        <div class="form-group">
            <label for="Group" class="font-weight-bold">Группа</label>
            <InputSelect Id="Group" style="width: 30%" @bind-Value="@model.Group" class="form-control col-3">
                <option selected>-- Выбрать --</option>
                @foreach (var group in Context.Groups)
                {
                    <option value="@group.IdGroup">@group.Name</option>
                }
            </InputSelect>
        </div>
        <button type="submit" class="btn btn-success">
            @ButtonText
        </button>
    </EditForm>
</div>

@code {

    public class StudentModel
    {
        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Введите имя студента")]
        [StringLength(10)]
        public string FirstName { get; set; }

        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Введите фамилию студента")]
        [StringLength(10)]
        public string LastName { get; set; }

        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Введите адрес")]
        [StringLength(100)]
        public string Address { get; set; }

        [System.ComponentModel.DataAnnotations.Required]
        [Range(17, 60, ErrorMessage = "Возраст должен быть между 17 и 60")]
        public int Age { get; set; }

        
        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Выберите группу")]
        public string Group { get; set; }
        
        [System.ComponentModel.DataAnnotations.Required]
        [Range(1, 4, ErrorMessage = "Курс должен быть между 1 и 4")]
        public int Course { get; set; }
    }

    public StudentModel model = new StudentModel();

    [Parameter]
    public string ButtonText { get; set; } = "Добавить";

    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    bool displayValidationErrorMessages = false;
    bool displayUserAddedToDB = false;


    private void HandleValidSubmit(EditContext context)
    {
        displayValidationErrorMessages = false;
        displayUserAddedToDB = true;
        try
        {
            var personalDataStudent = new PersonalDatum()
            {
                FirstName = model.FirstName,
                LastName = model.LastName,
                Age = model.Age,
                Address = model.Address
            };
            PersonalDataRepository.Add(personalDataStudent);
            var student = new Student()
            {
                Course = model.Course,
                IsStudy = 1,
                GroupId = Convert.ToInt32(model.Group),
                PersonalDataId = PersonalDataRepository.GetAll().Result.Last().IdPersonalData,
            };
            StudentRepository.Add(student);
            personalDataStudent.StudentId = StudentRepository.GetAll().Result.Last().IdStudent;
            PersonalDataRepository.Update(personalDataStudent);

            toastService.ShowSuccess($"{model.FirstName} {model.LastName} успешно добавлен в базу данных", "Добавлено в базу данных");
        }
        catch (Exception e)
        {
            toastService.ShowError("Не удалось добавить студента");
        }
    }

    private void HandleInvalidSubmit(EditContext context)
    {
        displayValidationErrorMessages = true;
        displayUserAddedToDB = false;
    }

}