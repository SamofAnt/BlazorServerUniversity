@page "/students"
@using BlazorServerUniversity.Repositories
@attribute [Authorize (Roles = "Admin")]

@inject IStudentRepository studentRepository;

<PageTitle>Counter</PageTitle>

<SpinLoader IsLoading="isLoading" Spinner="SpinnerType.Chase" Center="true" Color="#800080">
  <ContentTemplate>
    <div class="container mt-3 mb-4">
    <div class="col-lg-9 mt-4 mt-lg-0">
      <div class="row">
        <div class="col-md-12">
          <div class="user-dashboard-info-box table-responsive mb-0 bg-white p-4 shadow-sm">
            <table class="table manage-candidates-top mb-0">
              <thead>
              <tr>
                <th>Student Name</th>
                <th class="text-center">Status</th>
                <th class="action text-right">Action</th>
              </tr>
              </thead>

              <tbody>
              @foreach (var student in _students)
              {
                <tr class="candidates-list">

                  <td class="title">
                    <div class="thumb">
                      <img class="img-fluid" src="https://bootdey.com/img/Content/avatar/avatar7.png" alt="">
                    </div>
                    <div class="candidate-list-details">
                      <div class="candidate-list-info">
                        <div class="candidate-list-title">
                          <h5 class="mb-0">
                            <NavLink href="@($"Student/{student.IdStudent}")">
                              <a>@student.FirstName @student.LastName</a >
                            </NavLink>
                          </h5>
                        </div>
                        <div class="candidate-list-option">
                          <ul class="list-unstyled">
                            <li><i class="fas fa-filter pr-1"></i> @student.GroupName</li>
                            <li><i class="fas fa-map-marker-alt pr-1"></i> @student.Address</li>
                          </ul>
                        </div>
                      </div>
                    </div>
                  </td>

                  <td class="candidate-list-favourite-time text-center">
                    <a class="candidate-list-favourite order-2 text-danger" href="#"></a>
                    <span class="candidate-list-time order-1">Admitted</span>
                  </td>
                  <td>
                    <ul class="list-unstyled mb-0 d-flex justify-content-end">
                      <li><a href="#" class="text-primary" data-toggle="tooltip" title="" data-original-title="view"><i class="far fa-eye"></i></a></li>
                      <li><a href="#" class="text-info" data-toggle="tooltip" title="" data-original-title="Edit"><i class="fas fa-pencil-alt"></i></a></li>
                      <li><a href="#" class="text-danger" data-toggle="tooltip" title="" data-original-title="Delete"><i class="far fa-trash-alt"></i></a></li>
                    </ul>
                  </td>
                </tr>
              }
              </tbody>

            </table>
            <div class="text-center mt-3 mt-sm-3">
              <ul class="pagination justify-content-center mb-0">
                <li class="page-item disabled"> <span class="page-link">Prev</span> </li>
                <li class="page-item active" aria-current="page"><span class="page-link">1 </span> <span class="sr-only">(current)</span></li>
                <li class="page-item"><a class="page-link" href="#">2</a></li>
                <li class="page-item"><a class="page-link" href="#">3</a></li>
                <li class="page-item"><a class="page-link" href="#">...</a></li>
                <li class="page-item"><a class="page-link" href="#">25</a></li>
                <li class="page-item"> <a class="page-link" href="#">Next</a> </li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  </ContentTemplate>
</SpinLoader>
@code {
  private bool isLoading = true;
   IEnumerable<StudentInfo> _students;
  
  protected override async Task OnInitializedAsync()
  {
    isLoading = true;
     await base.OnInitializedAsync();
     await Task.Delay(2000);
     _students = (await studentRepository.GetAll());
    isLoading = false;
  }

}